package ro.ulbsibiu.acaps.viewer;

import java.awt.BorderLayout;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileNotFoundException;

import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.apache.log4j.Logger;
import org.jgraph.JGraph;
import org.jgraph.graph.DefaultGraphCell;
import org.jgraph.graph.DefaultGraphModel;
import org.jgraph.graph.GraphConstants;
import org.jgraph.graph.ParentMap;
import org.jgraph.graph.VertexView;
import org.jgrapht.graph.AbstractGraph;

import ro.ulbsibiu.acaps.ctg.xml.mapping.MappingType;
import ro.ulbsibiu.acaps.noc.NocGraph;
import ro.ulbsibiu.acaps.noc.xml.node.NodeType;

import com.jgraph.components.labels.MultiLineVertexRenderer;

/**
 * @author cipi
 * 
 */
public class NocApplicationMappingViewer extends JApplet {

	/** autogenerated serial version UID */
	private static final long serialVersionUID = 8532281998520203210L;

	/**
	 * Logger for this class
	 */
	private static final Logger logger = Logger
			.getLogger(NocApplicationMappingViewer.class);

	private NocJGraphModelAdapter jgAdapter;

	private AbstractGraph<Object, Object> graph;

	private String mappingXmlFilePath;

	public NocApplicationMappingViewer(AbstractGraph<Object, Object> graph,
			String mappingXmlFilePath) {
		logger.assertLog(graph != null, null);
		logger.assertLog(mappingXmlFilePath != null, null);

		this.graph = graph;
		this.mappingXmlFilePath = mappingXmlFilePath;
	}

	private JGraphLayoutPanel initialize() throws JAXBException {
		// create a visualization using JGraph, via an adapter
		jgAdapter = new NocJGraphModelAdapter(graph, new File(mappingXmlFilePath));
		JGraph jgraph = new JGraph(jgAdapter);

		// Overrides the global vertex renderer
		VertexView.renderer = new MultiLineVertexRenderer();
		JGraphLayoutPanel layoutPanel = new JGraphLayoutPanel(jgraph);

		return layoutPanel;
	}

	/**
	 * Initializes the applet by showing something interesting.
	 */
	public void start() {
		JGraphLayoutPanel layoutPanel;
		try {
			layoutPanel = initialize();
			getContentPane().setLayout(new BorderLayout());
			getContentPane().add(layoutPanel, BorderLayout.CENTER);
		} catch (JAXBException e) {
			logger.error(e);
		}
	}

	/**
	 * Starts the demo as an application.
	 * 
	 * @throws TokenizerException
	 * @throws FileNotFoundException
	 * @throws JAXBException 
	 */
	public static void main(String[] args) throws FileNotFoundException, JAXBException {
		if (args == null || args.length == 0) {
			System.err
					.println("usage:   java NocApplicationMappingViewer.class {NoC topology} {mapping XML}");
			System.err
					.println("example: java NocApplicationMappingViewer.class ../NoC-XML/src/ro/ulbsibiu/acaps/noc/topology/mesh2D/4x4 ../CTG-XML/xml/VOPD/ctg-0/mapping-0_m_bb.xml");
		} else {
			NocGraph nocGraph = new NocGraph(args[0]);
			NocApplicationMappingViewer app = new NocApplicationMappingViewer(
					nocGraph, args[1]);

			// Switch off D3D because of Sun XOR painting bug
			// See http://www.jgraph.com/forum/viewtopic.php?t=4066
			System.setProperty("sun.java2d.d3d", "false");
			JFrame frame = new JFrame(
					"Network-on-Chip Application Mapping Viewer");
			JGraphLayoutPanel layoutPanel = app.initialize();
			frame.getContentPane().add(layoutPanel);
			frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
			frame.pack();
			frame.setSize(800, 600);
			frame.setVisible(true);
		}
	}

}
